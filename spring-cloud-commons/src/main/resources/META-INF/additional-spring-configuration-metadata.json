{
	"properties": [
		{
			"defaultValue": "true",
			"name": "spring.cloud.refresh.enabled",
			"description": "Enables autoconfiguration for the refresh scope and associated features.",
			"type": "java.lang.Boolean"
		},
		{
			"defaultValue": true,
			"name": "spring.cloud.httpclientfactories.apache.enabled",
			"description": "Enables creation of Apache Http Client factory beans.",
			"type": "java.lang.Boolean"
		},
		{
			"defaultValue": "true",
			"name": "spring.cloud.httpclientfactories.ok.enabled",
			"description": "Enables creation of OK Http Client factory beans.",
			"type": "java.lang.Boolean"
		},
		{
			"defaultValue": true,
			"name": "spring.cloud.util.enabled",
			"description": "Enables creation of Spring Cloud utility beans.",
			"type": "java.lang.Boolean"
		},
		{
			"defaultValue": true,
			"name": "spring.cloud.features.enabled",
			"description": "Enables the features endpoint.",
			"type": "java.lang.Boolean"
		},
		{
			"defaultValue": true,
			"name": "spring.cloud.discovery.enabled",
			"description": "Enables discovery client health indicators.",
			"type": "java.lang.Boolean"
		},
		{
			"defaultValue": true,
			"name": "spring.cloud.discovery.client.composite-indicator.enabled",
			"description": "Enables discovery client composite health indicator.",
			"type": "java.lang.Boolean"
		},
		{
			"defaultValue": false,
			"name": "management.endpoint.env.post.enabled",
			"description": "Enables writable environment endpoint.",
			"type": "java.lang.Boolean"
		},
		{
			"name": "spring.cloud.loadbalancer.retry.enabled",
			"description": "Enables LoadBalancer retries.",
			"type": "java.lang.Boolean"
		},
		{
			"name": "spring.cloud.loadbalancer.health-check.initial-delay",
			"defaultValue": 0,
			"description": "Initial delay value for the HealthCheck scheduler.",
			"type": "java.time.Duration"
		},
		{
			"name": "spring.cloud.loadbalancer.health-check.interval ",
			"defaultValue": "25s",
			"description": "Interval for rerunning the HealthCheck scheduler.",
			"type": "java.time.Duration"
		},
		{
			"name": "spring.cloud.loadbalancer.health-check.path",
			"description": "Path at which the health-check request should be made. Can be set up per `serviceId`. A `default` value can be set up as well. If none is set up, `/actuator/health` will be used.",
			"type": "java.util.Map"
		},
		{
			"name": "spring.cloud.loadbalancer.health-check.port",
			"description": "Path at which the health-check request should be made. If none is set, the port under which the requested service is available at the service instance.",
			"type": "java.lang.Integer"
		},
		{
			"name": "spring.cloud.loadbalancer.health-check.refetch-instances",
			"defaultValue": false,
			"description": "Indicates whether the instances should be refetched by the `HealthCheckServiceInstanceListSupplier`. This can be used if the instances can be updated and the underlying delegate does not provide an ongoing flux.",
			"type": "java.lang.Boolean"
		},
		{
			"name": "spring.cloud.loadbalancer.health-check.refetch-instances-interval",
			"defaultValue": "25s",
			"description": "Interval for refetching available service instances.",
			"type": "java.time.Duration"
		},
		{
			"name": "spring.cloud.loadbalancer.health-check.repeat-health-check",
			"defaultValue": true,
			"description": "Indicates whether health checks should keep repeating. It might be useful to set it to `false` if periodically refetching the instances, as every refetch will also trigger a healthcheck.",
			"type": "java.lang.Boolean"
		},
		{
			"name": "spring.cloud.loadbalancer.retry.backoff.enabled",
			"defaultValue": false,
			"description": "Indicates whether Reactor Retry backoffs should be applied.",
			"type": "java.lang.Boolean"
		},
		{
			"name": "spring.cloud.loadbalancer.retry.backoff.jitter",
			"defaultValue": 0.5,
			"description": "Used to set `RetryBackoffSpec.jitter`.",
			"type": "java.lang.Double"
		},
		{
			"name": "spring.cloud.loadbalancer.retry.backoff.max-backoff",
			"defaultValue": "Long.MAX ms",
			"description": "Used to set `RetryBackoffSpec.maxBackoff`.",
			"type": "java.time.Duration"
		},
		{
			"name": "spring.cloud.loadbalancer.retry.backoff.min-backoff",
			"defaultValue": "5 ms",
			"description": "Used to set `RetryBackoffSpec#minBackoff`.",
			"type": "java.time.Duration"
		},
		{
			"name": "spring.cloud.loadbalancer.retry.max-retries-on-next-service-instance",
			"defaultValue": 1,
			"description": "Number of retries to be executed on the next `ServiceInstance`. A `ServiceInstance` is chosen before each retry call.",
			"type": "java.lang.Integer"
		},
		{
			"name": "spring.cloud.loadbalancer.retry.max-retries-on-same-service-instance",
			"defaultValue": 0,
			"description": "Number of retries to be executed on the same `ServiceInstance`.",
			"type": "java.lang.Integer"
		},
		{
			"name": "spring.cloud.loadbalancer.retry.retry-on-all-operations",
			"defaultValue": false,
			"description": "Indicates retries should be attempted on operations other than `HttpMethod.GET`.",
			"type": "java.lang.Boolean"
		},
		{
			"name": "spring.cloud.loadbalancer.retry.retryable-status-codes",
			"defaultValue": "{}",
			"description": "A `Set` of status codes that should trigger a retry.",
			"type": "java.util.Set"
		},
		{
			"name": "spring.cloud.loadbalancer.sticky-session.add-service-instance-cookie",
			"defaultValue": false,
			"description": "Indicates whether a cookie with the newly selected instance should be added by LoadBalancer.",
			"type": "java.lang.Boolean"
		},
		{
			"name": "spring.cloud.loadbalancer.sticky-session.instance-id-cookie-name",
			"defaultValue": "sc-lb-instance-id",
			"description": "The name of the cookie holding the preferred instance id.",
			"type": "java.lang.String"
		},
		{
			"name": "spring.cloud.loadbalancer.x-forwarded.enabled",
			"defaultValue": false,
			"description": "To Enable X-Forwarded Headers.",
			"type": "java.lang.Boolean"
		},
		{
			"name": "spring.cloud.loadbalancer.retry.retry-on-all-exceptions",
			"defaultValue": false,
			"description": "Indicates retries should be attempted for all exceptions, not only those specified in `retryableExceptions`.",
			"type": "java.lang.Boolean"
		},
		{
			"name": "spring.cloud.loadbalancer.retry.retryable-exceptions",
			"defaultValue": "{}",
			"description": "A `Set` of `Throwable` classes that should trigger a retry.",
			"type": "java.util.Set"
		},
		{
			"name": "spring.cloud.loadbalancer.stats.micrometer.enabled",
			"defaultValue": false,
			"description": "Enables micrometer metrics for load-balanced requests.",
			"type": "java.lang.Boolean"
		}
	]
}
